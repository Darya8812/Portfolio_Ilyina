import dash
from dash import dcc, html
import pandas as pd
import sqlite3
import plotly.express as px

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
conn = sqlite3.connect("sales.db")
df_games = pd.read_sql("SELECT * FROM vgsales", conn)
conn.close()

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–¥—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
df_games["Year"] = pd.to_numeric(df_games["Year"], errors="coerce")

# –ì—Ä–∞—Ñ–∏–∫: –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –≥–æ–¥–∞–º
fig_sales_by_year = px.line(df_games.groupby("Year")["Global_Sales"].sum().reset_index(),
                            x="Year", y="Global_Sales", title="üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –≤–∏–¥–µ–æ–∏–≥—Ä",
                            markers=True, color_discrete_sequence=["red"])

# –ì—Ä–∞—Ñ–∏–∫: –¢–æ–ø-10 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –∏–≥—Ä
fig_top_games = px.bar(df_games.groupby("Name")["Global_Sales"].sum().nlargest(10).reset_index(),
                       x="Global_Sales", y="Name", title="üèÜ –¢–æ–ø-10 –∏–≥—Ä",
                       orientation="h", color="Name", color_discrete_sequence=px.colors.qualitative.Bold)

# –ì—Ä–∞—Ñ–∏–∫: –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
fig_genre_sales = px.bar(df_games.groupby("Genre")["Global_Sales"].sum().reset_index(),
                         x="Genre", y="Global_Sales", title="üéÆ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∂–∞–Ω—Ä–∞–º",
                         color="Genre", color_discrete_sequence=px.colors.qualitative.Set3)

# –ì—Ä–∞—Ñ–∏–∫: –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
fig_platform_sales = px.bar(df_games.groupby("Platform")["Global_Sales"].sum().reset_index(),
                            x="Platform", y="Global_Sales", title="üïπÔ∏è –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º",
                            color="Platform", color_discrete_sequence=px.colors.qualitative.Pastel)

# –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –≤–∏–¥–µ–æ–∏–≥—Ä", style={"textAlign": "center"}),

    dcc.Graph(figure=fig_sales_by_year),
    dcc.Graph(figure=fig_top_games),
    dcc.Graph(figure=fig_genre_sales),
    dcc.Graph(figure=fig_platform_sales),
])

if __name__ == "__main__":
    app.run(debug=True)
