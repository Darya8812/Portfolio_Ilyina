import numpy as np
# task 1 Матрица единичная, с единичными и нулевыми элементами 
print ('единичную')
print ([3,5])
print()
print ('с единичными элементами')
print(np.ones([3,5]))
print ([3,5])
print()
print ('с нулевыми элементами')
print(np.zeros([3,5]))

# task 2 Вектор из n равноотстоящих точек, равномерно распределенных в интервале от a до b
print()
print ('Вектор из n равноотстоящих точек, равномерно распределенных в интервале от a до b')
print(np.linspace(3,20,14))

# task 3 Создать вектор n точек между декадами 10a и 10b'
print()
print ('Создать вектор n точек между декадами 10a и 10b')
print(np.logspace(0,2,14))

# task 4 Создать матрицу со случайными элементами размерностью mxn
print()
print ('Создать матрицу со случайными элементами размерностью mxn')
print(np.random.randn(3, 5))
print()
print(np.random.random_sample((3, 5)))

# task 5 Выделить главную диагональ матрицы из п.4.
print()
print ('task 5')
a=np.random.randn(3, 5)
print(a)
print()
print('Главная диагональ матрицы')
print(np.diag(a))

# task 6 Ввести матрицы
print()
print ('task 6, матрица А')
a=np.array([[0, -2],[4,3]])
print(a)
print()
print ('task 6, матрица B')
b=np.array([[-5, 4],[2, 1],[3, 1]])
print(b)
print()
print ('task 6, матрица C')
c=np.array([[-1, -2,-3],[1, 3, 1]])
print(c)

# task 7 Задать матрицы А и С и вектор В по вариантам:
print()
print ('task 7, матрица А')
a=np.array([[2, 4, 7],[3, 8, 3],[5, 6, 1]])
print(a)
print()
print ('task 7, матрица C')
c=np.array([[1, 7, 5],[5, 8, 2],[5, 6, 1]])
print(c)
print()
print ('task 7, вектор B')
b=np.array([[6],[9],[2]])
print(b)
#7aобъединить матрицы А и С вертикально и горизонтально
print()
print ('объединить матрицы А и С вертикально')
print(np.vstack((a,c)))
print ('объединить матрицы А и С горизонтально')
print(np.hstack((a,c)))
#7б) зеркально переставить строки матрицы А ¬– относительно горизонтальной оси, С – относительно вертикальной;
print()
print ('зеркально переставить строки матрицы А ¬– относительно горизонтальной оси')
print(np.fliplr(a))
print()
print ('зеркально переставить строки матрицы С – относительно вертикальной')
print(np.flipud(c))
#7c найти сумму элементов первого столбца матрицы А и произведение элементов второй строки матрицы С
print()
print ('найти сумму элементов первого столбца матрицы А ')
print(np.sum(a[:,],0))
print ('произведение элементов второй строки матрицы С ')
print(np.prod(c[1,:]))
#7d повернуть матрицу А на 270?;
print()
print ('повернуть матрицу А на 270?;')
print(np.rot90(a, k=3))
#7e выделить верхнюю треугольную часть матрицы А и нижнюю треугольную часть матрицы С
print ('выделить верхнюю треугольную часть матрицы А')
print(a[np.triu_indices(3)])
print ('выделить нижнюю треугольную часть матрицы С ')
print(c[np.tril_indices(3)])
#7fтранспонировать матрицу А
print()
print ('транспонировать матрицу А')
print(np.transpose(a))
#7g решить систему уравнений в матричной форме A· X = B
print()
print ('решить систему уравнений в матричной форме A· X = B')
x=np.linalg.solve(a,b)
print(x)
#7h ) поэлементно перемножить матрицы А и С
print()
print ('поэлементно перемножить матрицы А и С')
print(np.dot(a,c))
#7k для матрицы A найти собственные числа и векторы, ранг, определитель и обратную матрицу
print()
print ('для матрицы A найти собственные числа и векторы')
w,v=np.linalg.eig(a)
print(w)
print(v)
print()
print ('для матрицы A найти ранг')
print(np.linalg.matrix_rank(a))
print()
print ('для матрицы A найти определитель')
print(np.linalg.det(a))
print()
print ('для матрицы A найти обратную матрицу')
print(np.linalg.inv(a))

# task 8 Преобразовать матрицу А в вектор-столбец, затем в вектор-строку
print()
print ('task 8, матрица А')
a=np.array([[1,2,3,4],[4,3,2,1],[7,2,-4,-2],[1,0,-3, 2],])
print(a)
print()
